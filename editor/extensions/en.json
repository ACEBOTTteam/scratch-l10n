{
	"boost.color.any": "any color",
	"boost.color.black": "black",
	"boost.color.blue": "blue",
	"boost.color.green": "green",
	"boost.color.red": "red",
	"boost.color.white": "white",
	"boost.color.yellow": "yellow",
	"boost.getMotorPosition": "motor [MOTOR_REPORTER_ID] position",
	"boost.getTiltAngle": "tilt angle [TILT_DIRECTION]",
	"boost.motorDirection.backward": "that way",
	"boost.motorDirection.forward": "this way",
	"boost.motorDirection.reverse": "reverse",
	"boost.motorOff": "turn motor [MOTOR_ID] off",
	"boost.motorOn": "turn motor [MOTOR_ID] on",
	"boost.motorOnFor": "turn motor [MOTOR_ID] for [DURATION] seconds",
	"boost.motorOnForRotation": "turn motor [MOTOR_ID] for [ROTATION] rotations",
	"boost.seeingColor": "seeing [COLOR] brick?",
	"boost.setLightHue": "set light color to [HUE]",
	"boost.setMotorDirection": "set motor [MOTOR_ID] direction [MOTOR_DIRECTION]",
	"boost.setMotorPower": "set motor [MOTOR_ID] speed to [POWER] %",
	"boost.tiltDirection.any": "any",
	"boost.tiltDirection.down": "down",
	"boost.tiltDirection.left": "left",
	"boost.tiltDirection.right": "right",
	"boost.tiltDirection.up": "up",
	"boost.whenColor": "when [COLOR] brick seen",
	"boost.whenTilted": "when tilted [TILT_DIRECTION_ANY]",
	"ev3.beepNote": "beep note [NOTE] for [TIME] secs",
	"ev3.buttonPressed": "button [PORT] pressed?",
	"ev3.getBrightness": "brightness",
	"ev3.getDistance": "distance",
	"ev3.getMotorPosition": "motor [PORT] position",
	"ev3.motorSetPower": "motor [PORT] set power [POWER] %",
	"ev3.motorTurnClockwise": "motor [PORT] turn this way for [TIME] seconds",
	"ev3.motorTurnCounterClockwise": "motor [PORT] turn that way for [TIME] seconds",
	"ev3.whenBrightnessLessThan": "when brightness < [DISTANCE]",
	"ev3.whenButtonPressed": "when button [PORT] pressed",
	"ev3.whenDistanceLessThan": "when distance < [DISTANCE]",
	"gdxfor.getAcceleration": "acceleration [DIRECTION]",
	"gdxfor.getForce": "force",
	"gdxfor.getSpin": "spin speed [DIRECTION]",
	"gdxfor.getTilt": "tilt angle [TILT]",
	"gdxfor.isFreeFalling": "falling?",
	"gdxfor.isTilted": "tilted [TILT]?",
	"gdxfor.pulled": "pulled",
	"gdxfor.pushed": "pushed",
	"gdxfor.shaken": "shaken",
	"gdxfor.startedFalling": "started falling",
	"gdxfor.tiltDirectionMenu.any": "any",
	"gdxfor.tiltDirectionMenu.back": "back",
	"gdxfor.tiltDirectionMenu.front": "front",
	"gdxfor.tiltDirectionMenu.left": "left",
	"gdxfor.tiltDirectionMenu.right": "right",
	"gdxfor.turnedFaceDown": "turned face down",
	"gdxfor.turnedFaceUp": "turned face up",
	"gdxfor.whenForcePushedOrPulled": "when force sensor [PUSH_PULL]",
	"gdxfor.whenGesture": "when [GESTURE]",
	"gdxfor.whenTilted": "when tilted [TILT]",
	"makeymakey.downArrow": "down arrow",
	"makeymakey.downArrowShort": "down",
	"makeymakey.leftArrow": "left arrow",
	"makeymakey.leftArrowShort": "left",
	"makeymakey.rightArrow": "right arrow",
	"makeymakey.rightArrowShort": "right",
	"makeymakey.spaceKey": "space",
	"makeymakey.upArrow": "up arrow",
	"makeymakey.upArrowShort": "up",
	"makeymakey.whenKeyPressed": "when [KEY] key pressed",
	"makeymakey.whenKeysPressedInOrder": "when [SEQUENCE] pressed in order",
	"microbit.buttonsMenu.any": "any",
	"microbit.clearDisplay": "clear display",
	"microbit.defaultTextToDisplay": "Hello!",
	"microbit.displaySymbol": "display [MATRIX]",
	"microbit.displayText": "display text [TEXT]",
	"microbit.gesturesMenu.jumped": "jumped",
	"microbit.gesturesMenu.moved": "moved",
	"microbit.gesturesMenu.shaken": "shaken",
	"microbit.isButtonPressed": "[BTN] button pressed?",
	"microbit.isTilted": "tilted [DIRECTION]?",
	"microbit.pinStateMenu.off": "off",
	"microbit.pinStateMenu.on": "on",
	"microbit.tiltAngle": "tilt angle [DIRECTION]",
	"microbit.tiltDirectionMenu.any": "any",
	"microbit.tiltDirectionMenu.back": "back",
	"microbit.tiltDirectionMenu.front": "front",
	"microbit.tiltDirectionMenu.left": "left",
	"microbit.tiltDirectionMenu.right": "right",
	"microbit.whenButtonPressed": "when [BTN] button pressed",
	"microbit.whenGesture": "when [GESTURE]",
	"microbit.whenPinConnected": "when pin [PIN] connected",
	"microbit.whenTilted": "when tilted [DIRECTION]",
	"music.categoryName": "Music",
	"music.changeTempo": "change tempo by [TEMPO]",
	"music.drumBass": "(2) Bass Drum",
	"music.drumBongo": "(13) Bongo",
	"music.drumCabasa": "(15) Cabasa",
	"music.drumClaves": "(9) Claves",
	"music.drumClosedHiHat": "(6) Closed Hi-Hat",
	"music.drumConga": "(14) Conga",
	"music.drumCowbell": "(11) Cowbell",
	"music.drumCrashCymbal": "(4) Crash Cymbal",
	"music.drumCuica": "(18) Cuica",
	"music.drumGuiro": "(16) Guiro",
	"music.drumHandClap": "(8) Hand Clap",
	"music.drumOpenHiHat": "(5) Open Hi-Hat",
	"music.drumSideStick": "(3) Side Stick",
	"music.drumSnare": "(1) Snare Drum",
	"music.drumTambourine": "(7) Tambourine",
	"music.drumTriangle": "(12) Triangle",
	"music.drumVibraslap": "(17) Vibraslap",
	"music.drumWoodBlock": "(10) Wood Block",
	"music.getTempo": "tempo",
	"music.instrumentBass": "(6) Bass",
	"music.instrumentBassoon": "(14) Bassoon",
	"music.instrumentCello": "(8) Cello",
	"music.instrumentChoir": "(15) Choir",
	"music.instrumentClarinet": "(10) Clarinet",
	"music.instrumentElectricGuitar": "(5) Electric Guitar",
	"music.instrumentElectricPiano": "(2) Electric Piano",
	"music.instrumentFlute": "(12) Flute",
	"music.instrumentGuitar": "(4) Guitar",
	"music.instrumentMarimba": "(19) Marimba",
	"music.instrumentMusicBox": "(17) Music Box",
	"music.instrumentOrgan": "(3) Organ",
	"music.instrumentPiano": "(1) Piano",
	"music.instrumentPizzicato": "(7) Pizzicato",
	"music.instrumentSaxophone": "(11) Saxophone",
	"music.instrumentSteelDrum": "(18) Steel Drum",
	"music.instrumentSynthLead": "(20) Synth Lead",
	"music.instrumentSynthPad": "(21) Synth Pad",
	"music.instrumentTrombone": "(9) Trombone",
	"music.instrumentVibraphone": "(16) Vibraphone",
	"music.instrumentWoodenFlute": "(13) Wooden Flute",
	"music.midiPlayDrumForBeats": "play drum [DRUM] for [BEATS] beats",
	"music.midiSetInstrument": "set instrument to [INSTRUMENT]",
	"music.playDrumForBeats": "play drum [DRUM] for [BEATS] beats",
	"music.playNoteForBeats": "play note [NOTE] for [BEATS] beats",
	"music.restForBeats": "rest for [BEATS] beats",
	"music.setInstrument": "set instrument to [INSTRUMENT]",
	"music.setTempo": "set tempo to [TEMPO]",
	"pen.categoryName": "Pen",
	"pen.changeColorParam": "change pen [COLOR_PARAM] by [VALUE]",
	"pen.changeHue": "change pen color by [HUE]",
	"pen.changeShade": "change pen shade by [SHADE]",
	"pen.changeSize": "change pen size by [SIZE]",
	"pen.clear": "erase all",
	"pen.colorMenu.brightness": "brightness",
	"pen.colorMenu.color": "color",
	"pen.colorMenu.saturation": "saturation",
	"pen.colorMenu.transparency": "transparency",
	"pen.penDown": "pen down",
	"pen.penUp": "pen up",
	"pen.setColor": "set pen color to [COLOR]",
	"pen.setColorParam": "set pen [COLOR_PARAM] to [VALUE]",
	"pen.setHue": "set pen color to [HUE]",
	"pen.setShade": "set pen shade to [SHADE]",
	"pen.setSize": "set pen size to [SIZE]",
	"pen.stamp": "stamp",
	"speech.defaultWhenIHearValue": "let''s go",
	"speech.extensionName": "Speech to Text",
	"speech.listenAndWait": "listen and wait",
	"speech.speechReporter": "speech",
	"speech.whenIHear": "when I hear [PHRASE]",
	"text2speech.alto": "alto",
	"text2speech.categoryName": "Text to Speech",
	"text2speech.defaultTextToSpeak": "hello",
	"text2speech.giant": "giant",
	"text2speech.kitten": "kitten",
	"text2speech.setLanguageBlock": "set language to [LANGUAGE]",
	"text2speech.setVoiceBlock": "set voice to [VOICE]",
	"text2speech.speakAndWaitBlock": "speak [WORDS]",
	"text2speech.squeak": "squeak",
	"text2speech.tenor": "tenor",
	"translate.categoryName": "Translate",
	"translate.defaultTextToTranslate": "hello",
	"translate.translateBlock": "translate [WORDS] to [LANGUAGE]",
	"translate.viewerLanguage": "language",
	"videoSensing.categoryName": "Video Sensing",
	"videoSensing.direction": "direction",
	"videoSensing.motion": "motion",
	"videoSensing.off": "off",
	"videoSensing.on": "on",
	"videoSensing.onFlipped": "on flipped",
	"videoSensing.setVideoTransparency": "set video transparency to [TRANSPARENCY]",
	"videoSensing.sprite": "sprite",
	"videoSensing.stage": "stage",
	"videoSensing.videoOn": "video [ATTRIBUTE] on [SUBJECT]",
	"videoSensing.videoToggle": "turn video [VIDEO_STATE]",
	"videoSensing.whenMotionGreaterThan": "when video motion > [REFERENCE]",
	"wedo2.getDistance": "distance",
	"wedo2.getTiltAngle": "tilt angle [TILT_DIRECTION]",
	"wedo2.isTilted": "tilted [TILT_DIRECTION_ANY]?",
	"wedo2.motorDirection.backward": "that way",
	"wedo2.motorDirection.forward": "this way",
	"wedo2.motorDirection.reverse": "reverse",
	"wedo2.motorId.a": "motor A",
	"wedo2.motorId.all": "all motors",
	"wedo2.motorId.b": "motor B",
	"wedo2.motorId.default": "motor",
	"wedo2.motorOff": "turn [MOTOR_ID] off",
	"wedo2.motorOn": "turn [MOTOR_ID] on",
	"wedo2.motorOnFor": "turn [MOTOR_ID] on for [DURATION] seconds",
	"wedo2.playNoteFor": "play note [NOTE] for [DURATION] seconds",
	"wedo2.setLightHue": "set light color to [HUE]",
	"wedo2.setMotorDirection": "set [MOTOR_ID] direction to [MOTOR_DIRECTION]",
	"wedo2.startMotorPower": "set [MOTOR_ID] power to [POWER]",
	"wedo2.tiltDirection.any": "any",
	"wedo2.tiltDirection.down": "down",
	"wedo2.tiltDirection.left": "left",
	"wedo2.tiltDirection.right": "right",
	"wedo2.tiltDirection.up": "up",
	"wedo2.whenDistance": "when distance [OP] [REFERENCE]",
	"wedo2.whenTilted": "when tilted [TILT_DIRECTION_ANY]",
	"facial_recognition.camera": "open the camera in a popup window [ONE]",
	"facial_recognition.gather": "gather face data from the camera and label it as [ONE]",
	"facial_recognition": "recognize a face from the camera once",
	"facial_recognition.getFaceResult": "get face recognition result",
	"facial_recognition.getFaceReliability": "get the reliability of face recognition result",
	"facial_recognition.faceTracking": "face tracking[ONE]",
	"facial_recognition.initFaceGender": "initialize gender recognition",
	"facial_recognition.faceGender": "face gender recognition[ONE]",
	"open": "open",
	"close": "close",
	"facialRecognition": "facial recognition",
	"weather.getWeather": "get weather",
	"weather.getWeatherInfo": "get weather information for [ONE]",
	"weather.weather": "weather",
	"weather.maxTemp": "maximum temperature",
	"weather.minTemp": "minimum temperature",
	"weather.pressure": "pressure at sea level",
	"weather.humidity": "humidity",
	"weather.speed": "wind speed",
	"weather.deg": "wind direction",
	"weather.visibility": "visibility",
	"knn.machine.learning": "machine learning",
	"knn.init": "initialize KNN classifier",
	"knn.classify": "classify camera image as [ONE] using KNN",
	"knn.forecast": "forecast camera image classification using KNN",
	"knn.getResult": "get KNN classification result",
	"knn.clearTag": "clear KNN classification tag [ONE]",
	"knn.keepClasses": "keep KNN classification model",
	"knn.loadClasses": "load KNN classification model",
	"knn.clearAll": "clear all KNN classification model data",
	"knn.clearClassifier": "release KNN classifier",
	"gestureRecognition.gesture.recognition": "recognize gesture",
	"gestureRecognition.init": "initialize gesture recognition server API key [ONE] API secret [TWO]",
	"gestureRecognition.result": "gesture recognition result is [ONE] with probability",
	"gestureRecognition.heart_a": "heart A",
	"gestureRecognition.heart_b": "heart B",
	"gestureRecognition.heart_c": "heart C",
	"gestureRecognition.heart_d": "heart D",
	"gestureRecognition.OK": "ok",
	"gestureRecognition.hand_open": "hand open",
	"gestureRecognition.thumb_up": "thumb up",
	"gestureRecognition.thumb_down": "thumb down",
	"gestureRecognition.rock": "rock",
	"gestureRecognition.namaste": "namaste",
	"gestureRecognition.palm_up": "palm up",
	"gestureRecognition.fist": "fist",
	"gestureRecognition.index_finger_up": "index finger up",
	"gestureRecognition.double_finger_up": "two fingers up",
	"gestureRecognition.victory": "victory",
	"gestureRecognition.big_v": "big V",
	"gestureRecognition.phonecall": "phone call",
	"gestureRecognition.beg": "beg",
	"gestureRecognition.thanks": "thanks",
	"gestureRecognition": "gesture recognition",
	"carMotor.categoryName": "smart car",
	"carMotor.move.value": "move",
	"carMotor.move": "car moves towards [ONE], speed [TWO]",
	"carMotor.carInit": "car [ONE] initialization",
	"carMotor.run": "car runs",
	"carMotor.carGetInstruct": "get [ONE] signal",
	"carMotor.cargetInstructData": "instruction value",
	"carMotor.front": "front",
	"carMotor.back": "back",
	"carMotor.left": "left",
	"carMotor.right": "right",
	"carMotor.lf": "front left",
	"carMotor.lr": "back left",
	"carMotor.rf": "front right",
	"carMotor.rr": "back right",
	"carMotor.clockwise": "clockwise",
	"carMotor.anticlockwise": "counterclockwise",
	"fourLeggedBionicSpider.categoryName": "quadruped bionic spider robot",
	"fourLeggedBionicSpider.init": "spider [ONE] initialization",
	"fourLeggedBionicSpider.spiderMove": "move [ONE]",
	"fourLeggedBionicSpider.spiderMode": "activate [ONE] mode",
	"fourLeggedBionicSpider.spiderExecute": "spider movement",
	"fourLeggedBionicSpider.spiderGetInstruct": "get [ONE] signal",
	"fourLeggedBionicSpider.tcp": "network",
	"fourLeggedBionicSpider.uart": "serial port",
	"fourLeggedBionicSpider.standby": "standy",
	"fourLeggedBionicSpider.lying": "lying",
	"fourLeggedBionicSpider.sleep": "sleep",
	"fourLeggedBionicSpider.greet": "greet",
	"fourLeggedBionicSpider.pushup": "pushup",
	"fourLeggedBionicSpider.fighting": "fighting",
	"fourLeggedBionicSpider.dancing": "dancing",
	"fourLeggedBionicSpider.swing": "swing",
	"fourLeggedBionicSpider.handsome": "handsome",
	"carMotor.mode.fun": "car [ONE] mode",
	"carMotor.execute.mode": "car executes custom [ONE] mode",
	"carMotor.speed": "speed",
	"carMotor.buzzer": "buzzer",
	"carMotor.track": "track",
	"carMotor.avoidance": "avoidance",
	"carMotor.follow": "follow",
	"carMotor.roundTrack": "round track",
	"carMotor.8track": "8 track",
	"carMotor.stop": "car stops",
	"carMotor.move.stop": "stop",
	"carMotor.forward": "forward",
	"carMotor.backward": "backward",
	"carMotor.leftMove": "move left",
	"carMotor.rightMove": "move right",
	"fourLeggedBionicSpider.leftMove": "turn left",
	"fourLeggedBionicSpider.rightMove": "turn right",
	"ROBOT_ARM": "robot arm",
	"ROBOT_ARM_START_SERVE": "start robot arm[ONE]service",
	"ROBOT_ARM_INIT": "robot arm initialization chassis[ONE]shoulder[TWO]elbow[THREE]claws[FOUR]",
	"ROBOT_ARM_ACTION": "robot arm[ONE]",
	"ROBOT_ARM_JOYSTICK": "set [ONE]angle[TWO]",
	"ROBOT_ARM_GET_ARM_ANGLE": "get robot arm[ONE]angle",
	"ROBOT_ARM_ROCKER": "set[FOUR]x[ONE]y[TWO]sw[THREE]",
	"ROBOT_ARM_OPEN_MEMORY": "enable joystick memory mode",
	"ROBOT_ARM_COORD": "robot arm coordinate control x[ONE]y[TWO]z[THREE]",
	"ROBOT_ARM_GET_JOYSTICK_COORD": "get 3-axis coordinate[ONE]",
	"ROBOT_ARM_ERROR": "robot arm base error adjustment[ONE][TWO][THREE]",
	"ROBOT_ARM_MOTION": "wifi memory mode [ONE]",
	"ROBOT_ARM_RESET": "robot arm reset",
	"ROBOT_ARM_NET_INIT": "robot arm serial port update data",
	"ROBOT_ARM_GET_COMMAND": "get [ONE]signal",
	"ROBOT_ARM_GET_COMMAND_DATA": "get instruction[TWO]value",
	"ROBOT_ARM_LEFT_ROCKER": "left rocker",
	"ROBOT_ARM_RIGHT_ROCKER": "right rocker",
	"ROBOT_ARM_WEB_SERVER": "webpage",
	"ROBOT_ARM_MODE1": "mode 1",
	"ROBOT_ARM_MODE2": "mode 2",
	"ROBOT_ARM_MODE3": "mode 3",
	"ROBOT_ARM_MODE4": "mode 4",
	"ROBOT_ARM_MODE5": "mode 5",
	"ROBOT_ARM_MODE6": "mode 6",
	"ROBOT_ARM_KEEP": "save",
	"ROBOT_ARM_RUN": "run",
	"ROBOT_ARM_CLEAR": "clear",
	"ROBOT_ARM_OPEN_CLAWS": "open claws",
	"ROBOT_ARM_CLOSE_CLAWS": "close claws",
	"ROBOT_ARM_UP_ELBOW": "elbow up",
	"ROBOT_ARM_DOWN_ELBOW": "elbow down",
	"ROBOT_ARM_UP_SHOULDER": "shoulder up",
	"ROBOT_ARM_DOWN_SHOULDER": "shoulder down",
	"ROBOT_ARM_LEFT_CHASSIS": "chassis left",
	"ROBOT_ARM_RIGHT_CHASSIS": "chassis right",
	"ROBOT_ARM_CLAWS_SLIDE": "claws slider",
	"ROBOT_ARM_ELBOW_SLIDE": "elbow slider",
	"ROBOT_ARM_SHOULDER_SLIDE": "shoulder slider",
	"ROBOT_ARM_CHASSIS_SLIDE": "chassis slider",
	"ROBOT_ARM_CLAWS_INPUT": "claws input",
	"ROBOT_ARM_ELBOW_INPUT": "elbow input",
	"ROBOT_ARM_SHOULDER_INPUT": "shoulder input",
	"ROBOT_ARM_CHASSIS_INPUT": "chassis input",
	"ROBOT_ARM_DATA_RESRE": "reset",
	"ROBOT_ARM_KEEP_STATE": "save state",
	"ROBOT_ARM_STOP": "stop",
	"ROBOT_ARM_START": "start",
	"ROBOT_ARM_XYZ": "xyz input execution",
	"ROBOT_ARM_ZERO": "zero",
	"ROBOT_ARM_CLAWS": "claws",
	"ROBOT_ARM_ELBOW": "elbow",
	"ROBOT_ARM_SHOULDER": "shoulder",
	"ROBOT_ARM_CHASSIS": "chassis",
	"ROBOT_ARM_X": "space coordinate x",
	"ROBOT_ARM_Y": "space coordinate y",
	"ROBOT_ARM_Z": "space coordinate z",
	"carMotor.slider": "slider",
	"arm_car.arm.init": "robot arm initialization chassis[ONE]shoulder[TWO]elbow[THREE]wrist[FOUR]claws[FIVE]",
	"arm_car.arm.setAngle": "set robot arm [ONE] angle [TWO]",
	"arm_car.arm.wrist": "wrist",
	"arm_car.car.speed": "car speed",
	"arm_car.arm.wristSlide": "wrist slider",
	"arm_car.arm.wristInput": "wrist input",
	"carMotor.openLED": "turn on light",
	"carMotor.closeLED": "turn off light",
	"carMotor.setArmAngleSpeed": "set robot arm [ONE] angle [TWO] speed [THREE]",
	"carMotor.car.armExpand": "robot arm expansion",
	"carMotor.clearCommand": "clear command",
	"bipedRobot.categoryName": "biped robot",
	"bipedRobot.bipedRobotSetPin": "set left thigh[ONE] left calf[TWO] right thigh[THREE] right calf[FOUR]",
	"bipedRobot.bipedRobotRunAction": "run action[ONE] speed[TWO]",
	"bipedRobot.bipedRobotCreatAction": "create action[ONE]",
	"bipedRobot.bipedRobotSetAngle": "left thigh[ONE]left calf[TWO]right thigh[THREE]right calf[FOUR]speed[FIVE]",
	"bipedRobot.bipedRobotRun": "run[ONE]",
	"bipedRobot.bipedRobotServe": "start[ONE] service",
	"bipedRobot.bipedRobotGetAppCommand": "get[ONE] command",
	"bipedRobot.leftTurn": "left turn",
	"bipedRobot.rightTurn": "right turn",
	"bipedRobot.leftKick": "left kick",
	"bipedRobot.rightKick": "right kick",
	"bipedRobot.leftTilt": "left tilt",
	"bipedRobot.rightTilt": "right tilt",
	"bipedRobot.leftAnkles": "left swing leg",
	"bipedRobot.rightAnkles": "right swing leg",
	"bipedRobot.leftStamp": "left stamp",
	"bipedRobot.rightStamp": "right stamp",
	"bipedRobot.shadowsStep": "sprint",
	"bipedRobot.dance": "dance",
	"bipedRobot.follow": "follow",
	"bipedRobot.avoid": "avoid",
	"bipedRobot.stop": "robot stop",
	"bipedRobot.reset": "robot reset",
	"ROBOT_ARM_LOOP_RUN": "loop run",
	"carMotor.firing.expansion": "firing expansion",
	"carMotor.firing.module": "firing module initialization [ONE]",
	"carMotor.firing": "gun muzzle single shot",
	"carMotor.firing.servoInit": "firing servo initialization [ONE]",
	"carMotor.firing.servoSetAngle": "set firing servo angle [ONE]",
	"carMotor.camera.module": "camera expansion",
	"carMotor.camera.serverInit": "car camera [ONE][TWO] resolution [THREE] initialization",
	"carMotor.camera.server": "camera [ONE] service",
	"carMotor.camera.clientIsGetData": "is APP client receiving data",
	"carMotor.camera.dataForward": "forward [ONE] data",
	"carMotor.camera.carRun": "camera car movement",
	"carMotor.item.firing": "firing",
	"carMotor.item.firingAngle": "firing angle",
	"carMotor.item.forwardDirection": "flip to the up",
	"carMotor.item.reverseDirection": "flip to the down",
	"carMotor.camera.open": "open camera [ONE]",
	"carMotor.camera.frames": "frames",
	"carMotor.camera.webPageControl": "web page control",
	"carMotor.camera.highDefinition": "high definition",
	"carMotor.camera.mediumQuality": "medium quality",
	"carMotor.camera.lowQuality": "low quality",
	"meteorologicalStation.categoryName": "weather station",
	"meteorologicalStation.server": "weather [ONE]",
	"meteorologicalStation.sendData": "send [ONE] value [TWO]",
	"meteorologicalStation.light": "light",
	"meteorologicalStation.uv": "uv",
	"meteorologicalStation.atm": "atmospheric pressure",
	"meteorologicalStation.rain": "raindrop",
	"meteorologicalStation.PM25": "PM2.5",
	"meteorologicalStation.wind": "wind speed",
	"meteorologicalStation.tem": "temperature",
	"meteorologicalStation.hum": "humidity",
	"meteorologicalStation.vibration": "vibration",
	"meteorologicalStation.servo": "servo",
	"meteorologicalStation.all": "all sensors",
	"carMotor.item.flipToTheLeft": "flip to the left",
	"carMotor.item.flipToTheRight": "flip to the right",
	"chart.categoryName": "Data Chart",
	"chart.showChart": "Open Chart Window",
	"chart.setTitle": "Set Chart Title [ONE]",
	"chart.setAxisTitle": "Set Axis Titles: x-axis [ONE] y-axis [TWO]",
	"chart.inputData": "Input data for [ONE]: x-axis [TWO] y-axis [THREE]",
	"chart.clearData": "Clear Data",
	"chart.closeChart": "Close Chart Window",
	"smartHome.categoryName": "smart home",
	"smartHome.server": "smart home [ONE]",
	"smartHome.reset": "signal reset",
	"smartHome.openLED": "turn on light",
	"smartHome.closeLED": "turn off light",
	"smartHome.openDoor": "open door",
	"smartHome.closeDoor": "close door",
	"smartHome.openWindow": "open window",
	"smartHome.closeWindow": "close window",
	"smartHome.openLaser": "turn on laser",
	"smartHome.closeLaser": "turn off laser",
	"smartHome.openRGB": "turn on rgb",
	"smartHome.closeRGB": "turn off rgb",
	"smartHome.light": "light",
	"smartHome.PIR": "infrared sensor",
	"smartHome.raindrop": "raindrop",
	"smartHome.Tem": "temperature",
	"smartHome.Hum": "humidity",
	"smartFarm.categoryName": "smart farm",
	"smartFarm.server": "smart farm [ONE]",
	"smartFarm.openFeeder": "open feeder",
	"smartFarm.closeFeeder": "close feeder",
	"smartFarm.waterLevel": "water level",
	"smartFarm.soilMoisture": "soil moisture",
	"carMotor.continuous.firing": "gun muzzle [ONE] continuous shooting",
	"carMotor.bluetoothController.expansion.name": "bluetooth controller",
	"carMotor.bluetoothController.connect": "connect bluetooth controller [ONE]",
	"carMotor.bluetoothController.isConnect": "is bluetooth controller connected",
	"carMotor.bluetoothController.buttons": "bluetooth controller [ONE] is [TWO]",
	"carMotor.bluetoothController.disConnect": "disconnect",
	"carMotor.bluetoothController.move": "bluetooth controller [ONE] is moving",
	"carMotor.bluetoothController.getData": "bluetooth controller [ONE] [TWO] value",
	"carMotor.bluetoothController.leftUp": "left front",
	"carMotor.bluetoothController.leftDown": "left rear",
	"carMotor.bluetoothController.rightUp": "right front",
	"carMotor.bluetoothController.rightDown": "right rear",
	"carMotor.bluetoothController.pressDown": "pressed",
	"carMotor.bluetoothController.undo": "released",
	"ASR.categoryName": "speech recognition",
	"ASR.sound_config": "sound configuration pronunciation[ONE] volume[TWO] speed[THREE]",
	"ASR.turn_on_the_radio": "startup broadcast[ONE] timeout[TWO]s",
	"ASR.wakeword": "wake sensitivity[ONE] wake word[TWO] wake reply[THREE]",
	"ASR.exit_reply": "timeout exit reply[ONE]",
	"ASR.initiative_exit": "initiative exit command[ONE] reply[TWO]",
	"ASR.command_recognition_sensitivity": "command recognition sensitivity[ONE]",
	"ASR.recognition_command": "action name[ONE] ID[TWO] Command word[THREE] reply[FOUR] port output[FIVE]",
	"ASR.sweet_girl": "sweet girl voice",
	"ASR.cute_girl_voice": "cute girl voice",
	"ASR.vivacious_female_voice": "vivacious female voice",
	"ASR.male_announcer": "male announcer",
	"ASR.naive_boy_voice": "naive boy voice",
	"ASR.childs_voice": "child voice"
}